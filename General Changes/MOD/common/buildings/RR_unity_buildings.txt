building_organic_paradise = {
	base_buildtime = @b2_time
	can_build = no
	icon = building_paradise_dome

	category = unity

	potential = {
		exists = owner
		owner = { has_valid_civic = civic_machine_servitor }
	}

	destroy_trigger = {
		exists = owner
		NOT = { owner = { has_valid_civic = civic_machine_servitor } }
	}

	convert_to = {
		building_paradise_dome
		building_communal_housing_large
	}

	planet_modifier = {
		job_bio_trophy_add = 40
		job_artisan_drone_add = 4
		job_maintenance_drone_add = 8
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
			exotic_gases = @b2_rare_cost
		}
		upkeep = {
			energy = 20
			exotic_gases = @b3_rare_upkeep
		}
	}

	triggered_desc = {
		text = job_bio_trophy_effect_desc
	}

	triggered_desc = {
		text = job_artisan_drone_effect_desc
	}

	triggered_desc = {
		text = job_maintenance_drone_effect_desc
	}

	prerequisites = { "tech_paradise_dome" }

	show_tech_unlock_if = {
		owner = { has_valid_civic = civic_machine_servitor }
	}

	# Here we try to adress the second issue that the AI cant evaluate the pop job output of the bio trophy given the happiness trigger that was put inplace to guard against players exploiting bio trophies

	#science
	ai_resource_production = {
		unity = 20
		physics_research = 20

		trigger = {
			has_unemployed_pop_of_category = bio_trophy

			planet_resource_compare = {
				resource = physics_research
				value >= 100
				type = produces
			}
		}
	}

	#alloys
	ai_resource_production = {
		unity = 20
		alloys = 20

		trigger = {
			has_unemployed_pop_of_category = bio_trophy

			planet_resource_compare = {
				resource = alloys
				value >= 100
				type = produces
			}
		}
	}

	#cgs
	ai_resource_production = {
		unity = 20
		consumer_goods = 20

		trigger = {
			has_unemployed_pop_of_category = bio_trophy

			planet_resource_compare = {
				resource = consumer_goods
				value >= 100
				type = produces
			}
		}
	}
}

building_fe_sky_dome = {
	base_buildtime = @b2_time
	can_build = yes
	can_demolish = yes

	category = amenity

	potential = {
		exists = owner
		owner = {
			OR = {
				is_fallen_empire = yes
				has_technology = tech_fe_dome_1
				has_country_flag = skydome_can_build
			}
		}
		NOT = {
			has_modifier = slave_colony
		}
	}

	allow = {
		custom_tooltip = {
			fail_text = ancrel.10004.failtext
			owner = {
				OR = {
					check_variable = { which = skydome_build_count value >= 1 }
					is_fallen_empire = yes
					has_technology = tech_fe_dome_1
				}
			}
		}
	}

	destroy_trigger = {
		always = no
	}

	planet_modifier = {
		planet_amenities_add = 100
	}

	triggered_planet_modifier = {
		potential = {
			NOT = { owner = { has_valid_civic = civic_machine_servitor } }
		}
		planet_housing_add = 100
	}

	triggered_planet_modifier = {
		potential = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		job_patrol_drone_add = 2
		job_bio_trophy_add = 100
	}

	resources = {
		category = planet_buildings
		produces = {
			trigger = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			consumer_goods = 100
		}
		cost = { alloys = @b3_minerals }
		upkeep = {
			alloys = @b2_alloy_upkeep
			energy = 50
		}
		upkeep = {
			trigger = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			minerals = 50
		}
	}

	triggered_desc = {
		trigger = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		text = job_patrol_drone_effect_desc
	}

	triggered_desc = {
		trigger = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		text = job_bio_trophy_effect_desc
	}

	on_queued = {
		owner = {
			subtract_variable = { which = skydome_build_count value = 1 }
		}
	}

	on_unqueued = {
		owner = {
			change_variable = { which = skydome_build_count value = 1 }
		}
	}

	upgrades = {
		building_fe_dome
	}

	show_in_tech = tech_fe_dome_1
}

building_fe_dome = {
	base_buildtime = @b2_time
	can_build = no

	category = amenity

	potential = {
		exists = owner
		owner = {
			OR = {
				is_fallen_empire = yes
				has_technology = tech_fe_dome_2
				has_country_flag = skydome_can_build
			}
		}
		NOT = {
			has_modifier = slave_colony
		}
	}

	allow = {
		custom_tooltip = {
			fail_text = ancrel.10004.failtext
			exists = owner
			owner = {
				OR = {
					check_variable = { which = skydome_upgrade_count value >= 1 }
					is_fallen_empire = yes
					has_technology = tech_fe_dome_2
				}
			}
		}
	}

	destroy_trigger = {
		always = no
	}

	planet_modifier = {
		planet_amenities_add = 200
		planet_pops_upkeep_mult = -0.05
	}

	triggered_planet_modifier = {
		potential = {
			NOT = { owner = { has_valid_civic = civic_machine_servitor } }
		}
		planet_housing_add = 200
	}

	triggered_planet_modifier = {
		potential = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		job_patrol_drone_add = 4
		job_bio_trophy_add = 200
	}

	resources = {
		category = planet_buildings
		produces = {
			trigger = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			consumer_goods = 200
		}
		cost = { alloys = @b3_minerals }
		upkeep = {
			alloys = @b2_alloy_upkeep
			energy = 50
		}
		upkeep = {
			trigger = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			minerals = 50
		}
	}

	triggered_desc = {
		trigger = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		text = job_patrol_drone_effect_desc
	}

	triggered_desc = {
		trigger = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		text = job_bio_trophy_effect_desc
	}

	on_queued = {
		owner = {
			subtract_variable = { which = skydome_upgrade_count value = 1 }
		}
	}

	on_unqueued = {
		owner = {
			change_variable = { which = skydome_upgrade_count value = 1 }
		}
	}

	show_in_tech = tech_fe_dome_2
}
